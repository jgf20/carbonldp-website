<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop.xsd
	    http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
	">
	
	<!-- ====== Security Services ====== -->
	<bean id="platformAgentDetailsDAO" class="com.base22.carbon.security.dao.impl.JDBCAgentLoginDetailsDAO">
		<property name="securityJDBCDataSource" ref="securityJDBCDataSource" />
	</bean>
	<bean id="platformPrivilegeDAO" class="com.base22.carbon.security.dao.impl.JDBCPrivilegeDAO">
		<property name="securityJDBCDataSource" ref="securityJDBCDataSource" />
	</bean>
	<bean id="platformPlatformRoleDAO" class="com.base22.carbon.security.dao.impl.JDBCPlatformRoleDAO">
		<property name="securityJDBCDataSource" ref="securityJDBCDataSource" />
	</bean>
	<bean id="platformApplicationDAO" class="com.base22.carbon.security.dao.impl.JDBCApplicationDAO">
		<property name="securityJDBCDataSource" ref="securityJDBCDataSource" />
	</bean>
	<bean id="platformApplicationRoleDAO" class="com.base22.carbon.security.dao.impl.JDBCApplicationRoleDAO">
		<property name="securityJDBCDataSource" ref="securityJDBCDataSource" />
	</bean>
	<bean id="platformGroupDAO" class="com.base22.carbon.security.dao.impl.JDBCGroupDAO">
		<property name="securityJDBCDataSource" ref="securityJDBCDataSource" />
	</bean>
	<bean id="platformPermissionService" class="com.base22.carbon.security.services.PermissionService">
		<property name="aclCache" ref="aclCache" />
		<property name="aclService" ref="aclService" />
		<property name="transactionManager" ref="jdbcTransactionManager" />
	</bean>
	<!-- ====== End: Security Services ====== -->

	<!-- ====== REST API Authentication ====== -->
	<bean id="restAPIAuthenticationEntryPoint" class="com.base22.carbon.security.entryPoints.RestAPIAuthenticationEntryPoint" />
	<bean id="restAPIcorsProcessingFilter" class="com.base22.carbon.security.filters.RestAPICorsProcessingFilter"></bean>
	<bean id="restAPIAuthenticationProcessingFilter" class="com.base22.carbon.security.filters.RestAPIAuthenticationProcessingFilter"
		p:authenticationManager-ref="authenticationManager"
		p:authenticationSuccessHandler-ref="restAPIAuthenticationSuccessHandler"
		p:authenticationFailureHandler-ref="restAPIAuthenticationFailureHandler"
	>
		<constructor-arg value="/**" />
	</bean>
	<bean id="restAPIAuthenticationSuccessHandler" class="com.base22.carbon.security.handlers.RestAPIAuthenticationSuccessHandler"></bean>
    <bean id="restAPIAuthenticationFailureHandler" class="com.base22.carbon.security.handlers.RestAPIAuthenticationFailureHandler"></bean>
	<!-- === Basic Authentication === -->
	<bean id="restAPIBasicAuthenticationProcessingFilter"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<constructor-arg ref="authenticationManager" />
		<constructor-arg ref="restAPIBasicAuthenticationEntryPoint" />
	</bean>
	<bean id="restAPIBasicAuthenticationEntryPoint"
		class="com.base22.carbon.security.entryPoints.BasicAuthenticationEntryPoint">
		<property name="realmName" value="Carbon LDP"/>
	</bean>
	<!-- === End: Basic Authentication === -->
	<!-- === Token Authentication === -->
	<bean id="tokenService" class="org.springframework.security.core.token.KeyBasedPersistenceTokenService">
		<property name="serverSecret" value="W4KSqaZe8EcVCZF2afW8" />
		<property name="serverInteger" value="9936" />
		<property name="secureRandom" ref="secureRandom" />
	</bean>
	<bean name="secureRandom" class="java.security.SecureRandom" />
	<!-- === End: Token Authentication === -->
	<!-- === Application Context === -->
	<bean id="restAPIApplicationContextFilter" class="com.base22.carbon.security.filters.RestAPIApplicationContextFilter">
		<property name="applicationDAO" ref="platformApplicationDAO" />
		<property name="permissionService" ref="platformPermissionService" />
		<property name="configurationService" ref="configurationService" />
	</bean>
	<!-- === End: Application Context === -->
	<!-- ====== End: REST API Authentication ====== -->

	<!-- ====== Authentication Providers ====== -->
	<bean id="jdbcUsernamePasswordAuthenticationProvider" class="com.base22.carbon.security.providers.JDBCUsernamePasswordAuthenticationProvider" init-method="init">
		<property name="jdbcDataSource" ref="securityJDBCDataSource" />
		<property name="agentDetailsDAO" ref="platformAgentDetailsDAO" />
		<property name="privilegeDAO" ref="platformPrivilegeDAO" />
		<property name="groupDAO" ref="platformGroupDAO" />
		<property name="applicationRoleDAO" ref="platformApplicationRoleDAO" />
		<property name="configurationService" ref="configurationService" />
		<property name="ldpService" ref="ldpService" />
	</bean>
	<bean id="jdbcKeyAuthenticationProvider" class="com.base22.carbon.security.providers.JDBCKeyAuthenticationProvider" init-method="init">
		<property name="jdbcDataSource" ref="securityJDBCDataSource" />
		<property name="agentDetailsDAO" ref="platformAgentDetailsDAO" />
		<property name="privilegeDAO" ref="platformPrivilegeDAO" />
		<property name="groupDAO" ref="platformGroupDAO" />
		<property name="applicationRoleDAO" ref="platformApplicationRoleDAO" />
		<property name="configurationService" ref="configurationService" />
		<property name="ldpService" ref="ldpService" />
	</bean>
	<bean id="jdbcTokenAuthenticationProvider" class="com.base22.carbon.security.providers.JDBCTokenAuthenticationProvider" init-method="init">
		<property name="jdbcDataSource" ref="securityJDBCDataSource" />
		<property name="agentDetailsDAO" ref="platformAgentDetailsDAO" />
		<property name="privilegeDAO" ref="platformPrivilegeDAO" />
		<property name="groupDAO" ref="platformGroupDAO" />
		<property name="applicationRoleDAO" ref="platformApplicationRoleDAO" />
		<property name="configurationService" ref="configurationService" />
		<property name="ldpService" ref="ldpService" />
		
		<property name="tokenService" ref="tokenService" />
	</bean>
	<!-- When having trouble with the services scope - aop:scoped-proxy / -->
	
	
	
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="jdbcUsernamePasswordAuthenticationProvider" />
		<security:authentication-provider ref="jdbcKeyAuthenticationProvider" />
		<security:authentication-provider ref="jdbcTokenAuthenticationProvider" />
	</security:authentication-manager>
	<!-- ====== End: Authentication Providers ====== -->
	
	<security:http pattern="/auth/**" use-expressions="true" auto-config="false" create-session="stateless" entry-point-ref="restAPIBasicAuthenticationEntryPoint">
		<security:intercept-url pattern="/auth/login" access="isAuthenticated()" />
		<security:custom-filter ref="restAPIBasicAuthenticationProcessingFilter" position="BASIC_AUTH_FILTER" />
		<security:custom-filter ref="restAPIAuthenticationProcessingFilter" position="FORM_LOGIN_FILTER" />
	</security:http>
	
	<security:http pattern="/apps/**" use-expressions="true" auto-config="false" create-session="stateless" entry-point-ref="restAPIBasicAuthenticationEntryPoint">
		<security:custom-filter ref="restAPIcorsProcessingFilter" before="BASIC_AUTH_FILTER" />
		<security:custom-filter ref="restAPIBasicAuthenticationProcessingFilter" position="BASIC_AUTH_FILTER" />
		<security:custom-filter ref="restAPIAuthenticationProcessingFilter" position="FORM_LOGIN_FILTER" />
		<security:custom-filter ref="restAPIApplicationContextFilter" position="LAST" />
	</security:http>
		
	<!-- ====== ACLs ====== -->
	<!-- === ACL Expression Handler === -->
	<bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
		<property name="permissionEvaluator" ref="permissionEvaluator" />
		<property name="permissionCacheOptimizer">
            <bean class="org.springframework.security.acls.AclPermissionCacheOptimizer">
                <constructor-arg ref="aclService"/>
            </bean>
        </property>
	</bean>
	<!-- === End: ACL Expression Handler === -->
	<!-- === End: ACL Permission Evaluator === -->
	<bean id="permissionEvaluator" class="org.springframework.security.acls.AclPermissionEvaluator">
		<constructor-arg ref="aclService"/>
		<property name="permissionFactory" ref="permissionFactory" />
	</bean>
	<!-- === End: ACL Permission Evaluator === -->
	<bean id="permissionFactory" class="com.base22.carbon.security.models.CarbonACLPermissionFactory" />
	<!-- === ACL Service === -->
	<bean id="aclService" class="org.springframework.security.acls.jdbc.JdbcMutableAclService">
		<!-- DataSource -->
		<constructor-arg ref="securityJDBCDataSource" />
		<!-- Lookup Strategy -->
		<constructor-arg>
			<bean class="org.springframework.security.acls.jdbc.BasicLookupStrategy">
				<!-- DataSource -->
				<constructor-arg ref="securityJDBCDataSource" />
				<!-- ACL Cache -->
				<constructor-arg ref="aclCache" />
				<!-- ACL Authorization Strategy -->
				<constructor-arg>
					<bean class="org.springframework.security.acls.domain.AclAuthorizationStrategyImpl">
						<constructor-arg>
			                <bean class="org.springframework.security.core.authority.SimpleGrantedAuthority">
			                    <constructor-arg value="CARBON_ADMINISTRATOR"/>
			                </bean>
			            </constructor-arg>
					</bean>
				</constructor-arg>
				<!-- ACL Permission Granting Strategy -->
				<constructor-arg>
					<bean class="com.base22.carbon.security.CarbonPermissionGrantingStrategy">
						<constructor-arg>
							<bean class="com.base22.carbon.security.CarbonAuditLogger" />
						</constructor-arg>
						<property name="aclCache" ref="aclCache"></property>
					</bean>
				</constructor-arg>
				<property name="permissionFactory" ref="permissionFactory" />
			</bean>
		</constructor-arg>
		<!-- ACL Cache -->
		<constructor-arg ref="aclCache" />
		<property name="classIdentityQuery" value="SELECT @@IDENTITY"/>
		<property name="sidIdentityQuery" value="SELECT @@IDENTITY"/>
	</bean>
	<!-- === End: ACL Service === -->
	<!-- === ACL Cache === -->
	<bean id="aclCache" class="org.springframework.security.acls.domain.EhCacheBasedAclCache">
        <constructor-arg>
            <bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
                <property name="cacheManager">
                    <bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
                </property>
                <property name="cacheName" value="aclCache"/>
            </bean>
        </constructor-arg>
    </bean>
    <!-- === End: ACL Cache === -->
	<!-- ====== End: ACLs ====== -->

</beans>
